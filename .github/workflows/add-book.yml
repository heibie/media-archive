name: Add Book

on:
  workflow_dispatch:
    inputs:
      isbn:
        description: "ISBN (10 oder 13) – reicht aus, Rest wird automatisch ergänzt"
        required: true
        type: string
      title:
        description: "Buchtitel (optional, überschreibt Auto-Erkennung)"
        required: false
        type: string
      authors:
        description: "Autor:innen (kommagetrennt, optional – überschreibt Auto-Erkennung)"
        required: false
        type: string
      source:
        description: "Quelle/Link (optional)"
        required: false
        type: string
      rating:
        description: "Bewertung (z.B. 4 oder 4,5)"
        required: false
        type: string
      tags:
        description: "Tags (kommagetrennt, optional)"
        required: false
        type: string
      notes:
        description: "Notizen (optional)"
        required: false
        type: string
      status:
        description: "Lese-Status"
        required: false
        default: "want to read"
        type: choice
        options:
          - "currently reading"
          - "finished"
          - "want to read"

jobs:
  add-book:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml beautifulsoup4 lxml

      - name: Add book to _data/read.yml
        env:
          TITLE: ${{ inputs.title }}
          AUTHORS: ${{ inputs.authors }}
          ISBN: ${{ inputs.isbn }}
          SOURCE: ${{ inputs.source }}
          RATING: ${{ inputs.rating }}
          TAGS: ${{ inputs.tags }}
          NOTES: ${{ inputs.notes }}
          STATUS: ${{ inputs.status }}
        run: |
          python - <<'PY'
          import os, sys, re, json, urllib.request, urllib.error
          from datetime import date
          import yaml
          from bs4 import BeautifulSoup

          FILE_PATH = "_data/read.yml"

          # ----------------- Helpers -----------------
          def parse_list(val):
              if not val:
                  return None
              items = [x.strip() for x in re.split(r"[;,]", val) if x.strip()]
              return items or None

          def clean_isbn(s):
              if not s:
                  return None
              s = re.sub(r"[^0-9Xx]", "", s).upper()
              return s or None

          def parse_rating(s):
              if not s:
                  return None
              s = s.strip().replace(",", ".")
              try:
                  return float(s)
              except ValueError:
                  return None

          def norm(s):
              return re.sub(r"\s+", " ", (s or "").strip().lower())

          def load_yaml(path):
              if not os.path.exists(path):
                  return []
              with open(path, "r", encoding="utf-8") as f:
                  data = yaml.safe_load(f) or []
                  if not isinstance(data, list):
                      raise ValueError("read.yml ist kein Listenformat.")
                  return data

          def save_yaml(path, data):
              with open(path, "w", encoding="utf-8") as f:
                  yaml.dump(
                      data,
                      f,
                      allow_unicode=True,
                      sort_keys=False,
                      default_flow_style=False
                  )

          def http_get(url, timeout=20):
              req = urllib.request.Request(
                  url,
                  headers={
                      "User-Agent": "Mozilla/5.0 (compatible; HeikoAddBookBot/1.0; +https://github.com/)"
                  },
              )
              with urllib.request.urlopen(req, timeout=timeout) as resp:
                  return resp.read(), resp.geturl()
          
          # ----------------- ISBN utils -----------------
          def isbn10_to13(isbn10):
              base = "978" + isbn10[:-1]
              total = 0
              for i, ch in enumerate(base):
                  total += int(ch) * (1 if i % 2 == 0 else 3)
              check = (10 - (total % 10)) % 10
              return base + str(check)

          def ensure_isbn13(isbn):
              if not isbn: 
                  return None
              if len(isbn) == 13:
                  return isbn
              if len(isbn) == 10:
                  return isbn10_to13(isbn)
              return isbn  # lassen, ggf. Warnung

          # ----------------- OpenLibrary -----------------
          def fetch_openlibrary_data(isbn):
              url = f"https://openlibrary.org/api/books?bibkeys=ISBN:{isbn}&format=json&jscmd=data"
              try:
                  body, _ = http_get(url, timeout=15)
                  data = json.loads(body.decode("utf-8"))
                  return data.get(f"ISBN:{isbn}") or {}
              except Exception as e:
                  print(f"OpenLibrary Fehler: {e}", file=sys.stderr)
                  return {}

          def enrich_from_openlibrary(entry):
              isbn = entry.get("isbn")
              if not isbn:
                  return entry
              data = fetch_openlibrary_data(isbn)
              if not data:
                  return entry

              if not entry.get("titel"):
                  t = (data.get("title") or "").strip()
                  if t:
                      entry["titel"] = t

              if not entry.get("autor"):
                  authors = data.get("authors") or []
                  names = [a.get("name", "").strip() for a in authors if a.get("name")]
                  names = [n for n in names if n]
                  if names:
                      entry["autor"] = names

              if "cover" not in entry:
                  cover = data.get("cover") or {}
                  for k in ("large", "medium", "small"):
                      if cover.get(k):
                          entry["cover"] = cover[k]
                          break
                  if "cover" not in entry:
                      entry["cover"] = f"https://covers.openlibrary.org/b/isbn/{isbn}-L.jpg"

              # optionale Felder
              if not entry.get("verlag"):
                  publishers = data.get("publishers") or []
                  pubs = [p.get("name", "").strip() if isinstance(p, dict) else str(p).strip() for p in publishers]
                  pubs = [p for p in pubs if p]
                  if pubs:
                      entry["verlag"] = pubs[0]

              if not entry.get("erscheinungsjahr"):
                  # OpenLibrary hat publish_date oft als String (z.B. "2007")
                  pub_date = (data.get("publish_date") or "").strip()
                  m = re.search(r"(\d{4})", pub_date)
                  if m:
                      entry["erscheinungsjahr"] = m.group(1)

              if not entry.get("seiten"):
                  num_pages = data.get("number_of_pages")
                  if isinstance(num_pages, int) and num_pages > 0:
                      entry["seiten"] = num_pages

              return entry

          # ----------------- isbn.de -----------------
          def parse_json_ld_book(soup):
              """Suche nach JSON-LD vom Typ 'Book' und parse die wichtigsten Felder."""
              for tag in soup.find_all("script", {"type": "application/ld+json"}):
                  try:
                      data = json.loads(tag.string or tag.get_text() or "")
                  except Exception:
                      continue
                  # kann Liste oder Objekt sein
                  candidates = data if isinstance(data, list) else [data]
                  for obj in candidates:
                      if not isinstance(obj, dict):
                          continue
                      t = obj.get("@type") or obj.get("@type".lower())
                      if (isinstance(t, list) and "Book" in t) or t == "Book":
                          out = {}
                          name = obj.get("name") or obj.get("headline") or ""
                          if isinstance(name, str) and name.strip():
                              out["titel"] = name.strip()
                          # author kann String, Dict oder Liste sein
                          authors = obj.get("author")
                          names = []
                          if isinstance(authors, list):
                              for a in authors:
                                  if isinstance(a, dict):
                                      n = a.get("name")
                                      if n: names.append(n.strip())
                                  elif isinstance(a, str):
                                      names.append(a.strip())
                          elif isinstance(authors, dict):
                              n = authors.get("name")
                              if n: names.append(n.strip())
                          elif isinstance(authors, str):
                              names.append(authors.strip())
                          if names:
                              out["autor"] = names

                          image = obj.get("image")
                          if isinstance(image, str) and image.strip():
                              out["cover"] = image.strip()

                          publisher = obj.get("publisher")
                          if isinstance(publisher, dict):
                              n = publisher.get("name")
                              if n: out["verlag"] = n.strip()
                          elif isinstance(publisher, str) and publisher.strip():
                              out["verlag"] = publisher.strip()

                          date_pub = obj.get("datePublished") or obj.get("datepublished")
                          if isinstance(date_pub, str):
                              m = re.search(r"(\d{4})", date_pub)
                              if m:
                                  out["erscheinungsjahr"] = m.group(1)

                          pages = obj.get("numberOfPages")
                          if isinstance(pages, int) and pages > 0:
                              out["seiten"] = pages

                          return out
              return {}

          def enrich_from_isbn_de(entry):
              """Zieht Daten von isbn.de (HTML/JSON-LD/OG tags). Überschreibt NICHT bereits gesetzte Felder."""
              raw_isbn = entry.get("isbn")
              if not raw_isbn:
                  return entry
              isbn13 = ensure_isbn13(raw_isbn)
              url = f"https://www.isbn.de/buch/{isbn13}/"
              try:
                  body, final_url = http_get(url, timeout=20)
                  html = body.decode("utf-8", errors="ignore")
                  soup = BeautifulSoup(html, "lxml")

                  # JSON-LD bevorzugt
                  meta = parse_json_ld_book(soup)

                  # Fallback: OpenGraph
                  og_title = soup.find("meta", property="og:title")
                  if og_title and not meta.get("titel"):
                      t = og_title.get("content")
                      if t: meta["titel"] = t.strip()

                  og_image = soup.find("meta", property="og:image")
                  if og_image and not meta.get("cover"):
                      img = og_image.get("content")
                      if img: meta["cover"] = img.strip()

                  # Weitere simple Heuristiken (falls nötig, minimal invasiv):
                  # - Autoren stehen oft im Titel o. separaten Bereichen; hier belassen wir es bei JSON-LD.

                  # dummy/placeholder-Bilder ausfiltern
                  if "cover" in meta:
                      lower = meta["cover"].lower()
                      if ("nopic.png" in lower) or ("placeholder.png" in lower):
                          meta.pop("cover", None)

                  # nur leere Felder füllen
                  for k, v in meta.items():
                      if v in (None, "", []):
                          continue
                      if k not in entry or not entry.get(k):
                          entry[k] = v

              except urllib.error.HTTPError as e:
                  print(f"isbn.de HTTPError: {e}", file=sys.stderr)
              except urllib.error.URLError as e:
                  print(f"isbn.de URLError: {e}", file=sys.stderr)
              except Exception as e:
                  print(f"isbn.de Parsing-Fehler: {e}", file=sys.stderr)

              return entry

          # ----------------- Inputs lesen -----------------
          entry = {
              "typ": "buch",
              "status": (os.getenv("STATUS") or "want to read").strip(),
              "titel": (os.getenv("TITLE") or "").strip() or None,
              "autor": parse_list(os.getenv("AUTHORS")),
              "isbn": clean_isbn(os.getenv("ISBN")),
              "quelle": (os.getenv("SOURCE") or "").strip() or None,
              "bewertung": parse_rating(os.getenv("RATING")),
              "tags": parse_list(os.getenv("TAGS")),
              "notizen": (os.getenv("NOTES") or "").strip() or None,
          }

          if not entry.get("isbn"):
              print("Fehler: ISBN ist erforderlich.", file=sys.stderr)
              sys.exit(1)

          # Warnung, wenn Länge ungewohnt
          if len(entry["isbn"]) not in (10, 13):
              print(f"Warn: ISBN '{entry['isbn']}' hat unübliche Länge.", file=sys.stderr)

          # 1) isbn.de anreichern (preferiert)
          entry = enrich_from_isbn_de(entry)
          # 2) OpenLibrary als Fallback für noch leere Felder
          entry = enrich_from_openlibrary(entry)

          # Leere Felder entfernen
          entry = {k: v for k, v in entry.items() if v not in (None, "", [])}

          data = load_yaml(FILE_PATH)

          # Duplikat-Check
          def is_duplicate(e):
              for d in data:
                  if e.get("isbn") and d.get("isbn") == e["isbn"]:
                      return True
                  if e.get("quelle") and d.get("quelle") == e["quelle"]:
                      return True
                  if not e.get("isbn"):
                      if norm(d.get("titel")) == norm(e.get("titel")):
                          a_e = ", ".join(e.get("autor") or [])
                          a_d = ", ".join(d.get("autor") or [])
                          if norm(a_e) == norm(a_d) and a_e:
                              return True
              return False

          if is_duplicate(entry):
              print("Eintrag wirkt wie ein Duplikat – wird nicht ergänzt.")
              sys.exit(0)

          # Neueste Einträge nach oben
          data.insert(0, entry)

          save_yaml(FILE_PATH, data)
          print("Eintrag hinzugefügt (am Anfang von read.yml).")
          PY

      - name: Commit & Push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull --rebase origin "${GITHUB_REF_NAME:-main}" || true
          git add _data/read.yml
          git commit -m "Add book to read.yml" || echo "Nothing to commit"
          git push || true
