name: add-book-yaml

on:
  workflow_dispatch:
    inputs:
      status:
        description: "Buchstatus"
        required: true
        type: choice
        default: "finished"
        options:
          - "want to read"
          - "started"
          - "finished"
          - "abandoned"
          - "summary"
      title:
        description: "Titel (optional)"
        required: false
        type: string
      authors:
        description: "Autoren, kommasepariert (optional)"
        required: false
        type: string
      isbn:
        description: "ISBN (Ziffern/X, ohne Bindestriche, optional)"
        required: false
        type: string
      source:
        description: "Quelle/URL (optional)"
        required: false
        type: string
      date:
        description: "YYYY-MM-DD (leer = heute)"
        required: false
        type: string
      rating:
        description: "Bewertung 0-5 (optional)"
        required: false
        type: string
      tags:
        description: "Tags, kommasepariert (optional)"
        required: false
        type: string
      notes:
        description: "Notizen (optional)"
        required: false
        type: string
      enrich_openlibrary:
        description: "OpenLibrary anreichern, wenn ISBN vorhanden"
        required: false
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  append:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Append YAML entry
        env:
          STATUS: ${{ inputs.status }}
          TITLE: ${{ inputs.title }}
          AUTHORS: ${{ inputs.authors }}
          ISBN: ${{ inputs.isbn }}
          SOURCE: ${{ inputs.source }}
          DATE: ${{ inputs.date }}
          RATING: ${{ inputs.rating }}
          TAGS: ${{ inputs.tags }}
          NOTES: ${{ inputs.notes }}
          ENRICH: ${{ inputs.enrich_openlibrary }}
        run: |
          python - <<'PY'
               - name: Append YAML entry
        env:
          STATUS: ${{ inputs.status }}
          TITLE: ${{ inputs.title }}
          AUTHORS: ${{ inputs.authors }}
          ISBN: ${{ inputs.isbn }}
          SOURCE: ${{ inputs.source }}
          DATE: ${{ inputs.date }}
          RATING: ${{ inputs.rating }}
          TAGS: ${{ inputs.tags }}
          NOTES: ${{ inputs.notes }}
          ENRICH: ${{ inputs.enrich_openlibrary }}
        run: |
          python - <<'PY'
          import os, sys, re, pathlib, datetime, requests, yaml

          p = pathlib.Path("_data/read.yml")
          p.parent.mkdir(parents=True, exist_ok=True)

          def today():
              return datetime.date.today().isoformat()

          def parse_list(s):
              return [x.strip() for x in s.split(",") if x.strip()] if s else []

          def clean_isbn(s):
              if not s: return None
              s = re.sub(r"[^0-9Xx]", "", s)
              return s.upper() if s else None

          def parse_rating(s):
              s = (s or "").strip()
              if not s:
                  return None
              s = s.replace(",", ".")
              try:
                  val = float(s)
                  if val < 0: val = 0.0
                  if val > 5: val = 5.0
                  return val
              except Exception:
                  print(f"Warn: rating '{s}' nicht lesbar; wird ignoriert.", file=sys.stderr)
                  return None

          data = []
          if p.exists() and p.read_text().strip():
              data = yaml.safe_load(p.read_text()) or []
              if not isinstance(data, list):
                  data = []

          entry = {
              "typ": "buch",
              "status": (os.getenv("STATUS") or "finished"),
              "titel": (os.getenv("TITLE") or "").strip() or None,
              "autor": parse_list(os.getenv("AUTHORS")),
              "isbn": clean_isbn(os.getenv("ISBN")),
              "quelle": (os.getenv("SOURCE") or "").strip() or None,
              "fertig_am": (os.getenv("DATE") or "").strip() or today(),
              "bewertung": parse_rating(os.getenv("RATING")),
              "tags": parse_list(os.getenv("TAGS")),
              "notizen": (os.getenv("NOTES") or "").strip() or None,
          }

          def is_duplicate(e):
              for d in data:
                  if e.get("isbn") and d.get("isbn") == e["isbn"]:
                      return True
                  if e.get("quelle") and d.get("quelle") == e["quelle"]:
                      return True
              return False

          def enrich_with_openlibrary(e):
              """
              Erg√§nzt titel/autor/cover via OpenLibrary. Probiert 2 Endpunkte.
              """
              iso = (os.getenv("ENRICH") or "").strip().lower()
              if iso not in ("true","1","yes","y"):
                  print("Enrichment disabled via ENRICH env")
                  return
              isbn = e.get("isbn")
              if not isbn:
                  print("Enrichment skipped: no ISBN")
                  return

              # 1) Basisdaten
              try:
                  r = requests.get(f"https://openlibrary.org/isbn/{isbn}.json", timeout=12)
                  if r.status_code == 200:
                      meta = r.json()
                      if not e.get("titel") and meta.get("title"):
                          e["titel"] = meta["title"]
                      # Autoren via /authors/<key>.json nachziehen
                      authors_keys = [a.get("key") for a in meta.get("authors", []) if a.get("key")]
                      authors = []
                      for key in authors_keys:
                          ar = requests.get(f"https://openlibrary.org{key}.json", timeout=10)
                          if ar.status_code == 200:
                              nm = ar.json().get("name")
                              if nm: authors.append(nm)
                      if (not e.get("autor")) and authors:
                          e["autor"] = authors
                  else:
                      print(f"/isbn/<isbn>.json returned {r.status_code}")
              except Exception as ex:
                  print("Warn: first OL endpoint failed:", ex)

              # 2) Reichere Daten inkl. Cover
              try:
                  r2 = requests.get(
                      "https://openlibrary.org/api/books",
                      params={"bibkeys": f"ISBN:{isbn}", "format":"json", "jscmd":"data"},
                      timeout=12,
                      headers={"User-Agent":"Mozilla/5.0"}
                  )
                  if r2.status_code == 200:
                      data = r2.json() or {}
                      bk = data.get(f"ISBN:{isbn}")
                      if bk:
                          if not e.get("titel") and bk.get("title"):
                              e["titel"] = bk["title"]
                          if not e.get("autor"):
                              names = [a.get("name") for a in bk.get("authors", []) if a.get("name")]
                              if names:
                                  e["autor"] = names
                          cover = bk.get("cover", {})
                          cover_url = cover.get("large") or cover.get("medium") or cover.get("small")
                          if cover_url and not e.get("cover"):
                              e["cover"] = cover_url
                  else:
                      print(f"/api/books returned {r2.status_code}")
              except Exception as ex:
                  print("Warn: second OL endpoint failed:", ex)

          # --- Aufruf hier ---
          enrich_with_openlibrary(entry)

          # Leere Felder entfernen
          entry = {k: v for k, v in entry.items() if v not in (None, [], "")}

          if is_duplicate(entry):
              print("Duplicate detected, nothing appended.")
          else:
              data.append(entry)
              p.write_text(yaml.safe_dump(data, sort_keys=False, allow_unicode=True))

          print("OK")
          PY

          PY

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add _data/read.yml
          git commit -m "Add book to read.yml" || echo "Nothing to commit"
          git push || true
