name: Add Book

on:
  workflow_dispatch:
    inputs:
      title:
        description: "Buchtitel"
        required: true
        type: string
      authors:
        description: "Autor:innen (kommagetrennt)"
        required: false
        type: string
      isbn:
        description: "ISBN (10 oder 13)"
        required: false
        type: string
      source:
        description: "Quelle/Link (optional)"
        required: false
        type: string
      rating:
        description: "Bewertung (z.B. 4 oder 4,5)"
        required: false
        type: string
      tags:
        description: "Tags (kommagetrennt, optional)"
        required: false
        type: string
      notes:
        description: "Notizen (optional)"
        required: false
        type: string
      status:
        description: "Lese-Status"
        required: false
        default: "finished"
        type: choice
        options:
          - "currently reading"
          - "reading"
          - "finished"
          - "want to read"

jobs:
  add-book:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Add book to _data/read.yml
        env:
          TITLE: ${{ inputs.title }}
          AUTHORS: ${{ inputs.authors }}
          ISBN: ${{ inputs.isbn }}
          SOURCE: ${{ inputs.source }}
          RATING: ${{ inputs.rating }}
          TAGS: ${{ inputs.tags }}
          NOTES: ${{ inputs.notes }}
          STATUS: ${{ inputs.status }}
        run: |
          python - <<'PY'
          import os, sys, re, json, urllib.request, urllib.error
          from datetime import date
          import yaml
          
          FILE_PATH = "_data/read.yml"

          def parse_list(val):
              if not val:
                  return None
              # Split by comma/semicolon, strip whitespace, drop empties
              items = [x.strip() for x in re.split(r"[;,]", val) if x.strip()]
              return items or None

          def clean_isbn(s):
              if not s:
                  return None
              s = re.sub(r"[^0-9Xx]", "", s)
              s = s.upper()
              return s or None

          def parse_rating(s):
              if not s:
                  return None
              s = s.strip().replace(",", ".")
              try:
                  f = float(s)
                  return f
              except ValueError:
                  return None

          def norm(s):
              return re.sub(r"\s+", " ", (s or "").strip().lower())

          def load_yaml(path):
              if not os.path.exists(path):
                  return []
              with open(path, "r", encoding="utf-8") as f:
                  data = yaml.safe_load(f) or []
                  if not isinstance(data, list):
                      raise ValueError("read.yml ist kein Listenformat.")
                  return data

          def save_yaml(path, data):
              with open(path, "w", encoding="utf-8") as f:
                  yaml.dump(
                      data,
                      f,
                      allow_unicode=True,
                      sort_keys=False,
                      default_flow_style=False
                  )

          def openlibrary_cover(isbn):
              # OpenLibrary direkte Cover-URL (wird nicht 404 geprüft, ist aber ok)
              return f"https://covers.openlibrary.org/b/isbn/{isbn}-L.jpg"

          # Eingaben
          entry = {
              "typ": "buch",
              "status": (os.getenv("STATUS") or "finished").strip(),
              "titel": (os.getenv("TITLE") or "").strip() or None,
              "autor": parse_list(os.getenv("AUTHORS")),
              "isbn": clean_isbn(os.getenv("ISBN")),
              "quelle": (os.getenv("SOURCE") or "").strip() or None,
              "bewertung": parse_rating(os.getenv("RATING")),
              "tags": parse_list(os.getenv("TAGS")),
              "notizen": (os.getenv("NOTES") or "").strip() or None,
          }

          # Leere Felder entfernen
          entry = {k: v for k, v in entry.items() if v not in (None, "", [])}

          # Simple ISBN-Längenwarnung (nicht blockierend)
          if entry.get("isbn") and len(entry["isbn"]) not in (10, 13):
              print(f"Warn: ISBN '{entry['isbn']}' hat unübliche Länge.", file=sys.stderr)

          data = load_yaml(FILE_PATH)

          # Duplikat-Check: ISBN, Quelle, Fallback Titel+Autor
          def is_duplicate(e):
              for d in data:
                  if e.get("isbn") and d.get("isbn") == e["isbn"]:
                      return True
                  if e.get("quelle") and d.get("quelle") == e["quelle"]:
                      return True
                  if not e.get("isbn"):
                      if norm(d.get("titel")) == norm(e.get("titel")):
                          a_e = ", ".join(e.get("autor") or [])
                          a_d = ", ".join(d.get("autor") or [])
                          if norm(a_e) == norm(a_d) and a_e:
                              return True
              return False

          if is_duplicate(entry):
              print("Eintrag wirkt wie ein Duplikat – wird nicht ergänzt.")
              sys.exit(0)

          # Einfaches Cover-Enrichment über OpenLibrary (nur wenn ISBN vorhanden und kein Cover gesetzt)
          if entry.get("isbn") and "cover" not in entry:
              entry["cover"] = openlibrary_cover(entry["isbn"])

          # NEU: Am ANFANG einfügen (neueste oben)
          data.insert(0, entry)

          save_yaml(FILE_PATH, data)
          print("Eintrag hinzugefügt (am Anfang von read.yml).")
          PY

      - name: Commit & Push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # rebase-pull für robustes Pushen
          git pull --rebase origin "${GITHUB_REF_NAME:-main}" || true
          git add _data/read.yml
          git commit -m "Add book to read.yml" || echo "Nothing to commit"
          git push || true
